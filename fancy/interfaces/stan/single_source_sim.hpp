
// Code generated by stanc v2.31.0
#include <stan/model/model_header.hpp>
namespace single_source_sim_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 513> locations_array__ = 
{" (found before start of program)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 62, column 2 to column 18)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 63, column 2 to column 22)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 64, column 2 to column 21)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 68, column 4 to column 40)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 69, column 4 to column 46)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 70, column 4 to column 62)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 66, column 17 to line 72, column 3)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 66, column 2 to line 72, column 3)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 22, column 2 to column 17)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 25, column 2 to column 23)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 26, column 2 to column 9)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 29, column 2 to column 13)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 30, column 2 to column 20)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 33, column 2 to column 18)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 34, column 2 to column 8)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 41, column 2 to column 20)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 42, column 2 to column 19)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 43, column 2 to column 15)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 44, column 2 to column 24)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 45, column 2 to column 15)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 51, column 2 to column 40)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 52, column 2 to column 37)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 55, column 2 to column 17)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 56, column 2 to column 52)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 62, column 8 to column 9)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 63, column 8 to column 9)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 64, column 8 to column 9)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 13, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 14, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 11, column 33, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 27, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 28, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 29, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 31, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 35, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 36, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 39, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 38, column 31, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 38, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 33, column 21, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 33, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 43, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 25, column 41, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 55, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 56, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 58, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/energy_spectrum.stan', line 53, column 50, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 11, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 19, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 20, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 21, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 22, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 23, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 24, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 27, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 26, column 18, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 26, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 31, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 30, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 30, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 34, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 17, column 29, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 44, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 45, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 46, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 47, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 48, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 49, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 50, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 52, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 53, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 55, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 42, column 22, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 65, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 66, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 67, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 68, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 69, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 70, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 73, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 72, column 31, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 72, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 76, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 63, column 22, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 87, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 88, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 89, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 90, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 91, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 114, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 115, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 116, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 118, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 119, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 121, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 120, column 33, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 120, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 124, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 112, column 21, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 112, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 99, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 100, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 101, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 102, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 103, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 106, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 105, column 33, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 105, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 109, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 97, column 20, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 97, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 94, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 93, column 15, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 93, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 127, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 85, column 22, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 135, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 136, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 137, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 139, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 133, column 44, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 148, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 150, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 151, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 153, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 154, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 146, column 108, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 163, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 164, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 165, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 166, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 167, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 169, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 171, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 172, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 174, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 175, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 177, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 161, column 94, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 186, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 187, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 188, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 189, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 191, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 184, column 36, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 201, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 202, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 203, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 204, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 205, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 207, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 208, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 210, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 199, column 91, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 221, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 223, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 225, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 226, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 219, column 54, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 237, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 238, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 239, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 240, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 242, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 243, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 235, column 51, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 254, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 255, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 256, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 257, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 259, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 260, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 262, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 263, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 265, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 252, column 31, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 274, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 275, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 275, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 278, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 277, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 277, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 281, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 272, column 95, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 292, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 293, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 294, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 295, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 297, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 299, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 300, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 302, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 290, column 97, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 312, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 313, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 314, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 315, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 316, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 318, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 319, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 321, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 310, column 33, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 331, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 333, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 335, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 336, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 329, column 103, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 346, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 347, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 348, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 349, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 351, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 352, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 344, column 107, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 362, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 363, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 364, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 365, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 367, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 368, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 370, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 371, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 373, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 360, column 104, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 382, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 383, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 383, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 386, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 385, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 385, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 389, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 380, column 91, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 400, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 401, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 402, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 403, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 405, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 407, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 408, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 410, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/uhecr_propagation.stan', line 398, column 93, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 12, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 13, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 14, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 16, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 18, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 17, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 17, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 20, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 21, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 11, column 34, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 30, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 31, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 31, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 32, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 32, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 33, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 33, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 36, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 35, column 19, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 35, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 39, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 40, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 42, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 28, column 44, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 52, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 53, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 54, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 55, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 57, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 58, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 59, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 60, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 64, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 65, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 66, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 69, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 68, column 57, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 68, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 62, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 62, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 74, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 50, column 44, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 86, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 87, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 87, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 89, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 90, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 90, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 92, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 93, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 84, column 38, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 103, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 104, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 105, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 106, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 107, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 109, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 110, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 111, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 113, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/vMF.stan', line 101, column 31, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 13, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 15, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 14, column 40, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 25, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 27, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 35, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 34, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 32, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 31, column 24, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 31, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 29, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 28, column 18, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 28, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 38, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 23, column 41, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 51, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/observatory_exposure.stan', line 50, column 35, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 14, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 13, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 14, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 14, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 16, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 19, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 18, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 18, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 22, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 21, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 21, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 25, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 11, column 58, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 34, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 35, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 35, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 37, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 40, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 39, column 19, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 39, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 42, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 45, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 44, column 19, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 44, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 47, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 49, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 32, column 102, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 58, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 60, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 63, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 62, column 14, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 62, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 66, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 68, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 56, column 34, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 76, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 77, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 80, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 79, column 19, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 79, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 82, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 84, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 74, column 91, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 94, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 95, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 98, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 97, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 97, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 101, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 92, column 44, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 111, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 112, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 113, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 114, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 115, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 116, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 117, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 118, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 119, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 122, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 123, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 124, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 135, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 134, column 19, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 134, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 132, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 131, column 14, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 131, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 138, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 140, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 141, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 145, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 146, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 147, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 148, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 149, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 150, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 151, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 154, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 155, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 152, column 23, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 152, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 143, column 22, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 143, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 161, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 109, column 81, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 171, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 172, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 173, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 174, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 175, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 176, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 177, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 178, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 180, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 181, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 182, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 188, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 187, column 19, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 187, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 185, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 184, column 14, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 184, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 191, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 193, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 196, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 197, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 198, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 199, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 200, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 201, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 194, column 22, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 194, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 205, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 169, column 58, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 213, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 214, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 215, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 216, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 217, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 219, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 220, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 221, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 222, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 230, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 229, column 23, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 229, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 227, column 6, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 226, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 226, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 224, column 28, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 224, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 238, column 35, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 238, column 33, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 238, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 237, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 235, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 234, column 30, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 234, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 241, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 242, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 243, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 244, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 246, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 248, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 212, column 59, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 258, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 259, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 259, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 260, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 263, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 264, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 262, column 20, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 262, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 266, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 268, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 256, column 128, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 280, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 281, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 281, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 282, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 285, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 286, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 284, column 20, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 284, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 288, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 290, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 278, column 92, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 302, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 303, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 309, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 308, column 7, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 306, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 305, column 36, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 305, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 312, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 300, column 61, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 325, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 322, column 46, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 336, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 338, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 338, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 339, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 334, column 55, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 347, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 348, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 348, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 350, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 345, column 43, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 355, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 356, column 9, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 356, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 359, column 4, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 358, column 17, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 358, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 362, column 2, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)",
 " (in '/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/utils.stan', line 353, column 82, included from\n'/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan/single_source_sim.stan', line 15, column 0)"};

struct beta_pi_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& z, const T1__& E, std::ostream* pstream__) const;
};
struct spectrum_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& E, const T1__& alpha, const T2__& Emin,
             std::ostream* pstream__) const;
};
struct E_ode_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& r, const std::vector<T1__>& state,
             const std::vector<T2__>& params, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const;
};
struct get_Nex_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_stan_scalar<T6__>,
                                stan::is_stan_scalar<T7__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                       stan::base_type_t<T3__>, T4__,
                       stan::promote_args_t<stan::base_type_t<T5__>, T6__, T7__>>
  operator()(const T0__& F, const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
             const T2__& kappa_grid, const T3__& kappa, const T4__& alpha_T,
             const T5__& Eth_src, const T6__& Eth, const T7__& alpha,
             std::ostream* pstream__) const;
};
struct m_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& theta, const std::vector<T1__>& p,
             std::ostream* pstream__) const;
};
struct phi_inf_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& xi, std::ostream* pstream__) const;
};
struct E_ode_rev_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& r, const std::vector<T1__>& state,
             const std::vector<T2__>& params, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const;
};
struct fik_lpdf_functor__ {
  template <bool propto__, typename T0__, typename T1__, typename T2__,
            typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                       T3__>
  operator()(const T0__& v, const T1__& mu, const T2__& kappa,
             const T3__& kappa_d, std::ostream* pstream__) const;
};
struct get_Eth_src_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  operator()(const T0__& Eth, const std::vector<std::vector<double>>& D,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct get_Eex_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>, -1, 1>
  operator()(const T0__& alpha, const T1__& Eth_src, std::ostream* pstream__) const;
};
struct get_Nex_sim_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                       stan::base_type_t<T3__>, T4__,
                       stan::promote_args_t<T5__>>
  operator()(const T0__& F, const T1__& eps, const T2__& alpha_T,
             const T3__& Eth_src, const T4__& Eth, const T5__& alpha,
             std::ostream* pstream__) const;
};
struct beta_adi_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& z, std::ostream* pstream__) const;
};
struct beta_bh_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& z, const T1__& E, const std::vector<T2__>& xiout,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct sample_weight_rng_functor__ {
  template <typename T0__, typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& kappa, const int& dim, RNG& base_rng__,
             std::ostream* pstream__) const;
};
struct beta_bh_approx_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& z, const T1__& E, std::ostream* pstream__) const;
};
struct get_Nex_arr_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_stan_scalar<T3__>,
                                stan::is_stan_scalar<T4__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                       T3__, T4__>
  operator()(const T0__& F, const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
             const T2__& kappa_grid, const T3__& kappa, const T4__& alpha_T,
             std::ostream* pstream__) const;
};
struct interpolate_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__>
  operator()(const T0__& x_values, const T1__& y_values, const T2__& x,
             std::ostream* pstream__) const;
};
struct get_Fs_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const std::vector<T0__>& Q, const std::vector<T1__>& D,
             std::ostream* pstream__) const;
};
struct get_exposure_weights_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                       stan::base_type_t<T3__>, T4__,
                       stan::promote_args_t<T5__>>, -1, 1>
  operator()(const T0__& F, const T1__& eps, const T2__& alpha_T,
             const T3__& Eth_src, const T4__& Eth, const T5__& alpha,
             std::ostream* pstream__) const;
};
struct xi_exp_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& theta, const std::vector<T1__>& p,
             std::ostream* pstream__) const;
};
struct exposure_limited_sphere_rng_functor__ {
  template <typename T0__, typename T1__, typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>
  operator()(const T0__& a0, const T1__& theta_m, RNG& base_rng__,
             std::ostream* pstream__) const;
};
struct get_kappa_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& E, const T1__& B, const T2__& D, const int& Z,
             std::ostream* pstream__) const;
};
struct alpha_m_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& theta, const std::vector<T1__>& p,
             std::ostream* pstream__) const;
};
struct dEdr_approx_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& r, const T1__& E, std::ostream* pstream__) const;
};
struct get_Eth_src_sim_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  operator()(const T0__& Eth, const std::vector<std::vector<double>>& D,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct get_phi_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& xi, std::ostream* pstream__) const;
};
struct phi_integrand_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& xi, const T1__& E, const T2__& z,
             std::ostream* pstream__) const;
};
struct abs_val_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  operator()(const T0__& input_vector, std::ostream* pstream__) const;
};
struct get_source_weights_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>
  operator()(const std::vector<T0__>& Q, const std::vector<T1__>& D,
             std::ostream* pstream__) const;
};
struct omega_to_theta_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  operator()(const T0__& omega, std::ostream* pstream__) const;
};
struct get_source_threshold_energy_sim_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& Eth, const std::vector<double>& D,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct get_arrival_energy_sim_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& E, const std::vector<double>& D,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct vMF_rng_functor__ {
  template <typename T0__, typename T1__, typename RNG,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>, -1, 1>
  operator()(const T0__& mu, const T1__& kappa, RNG& base_rng__,
             std::ostream* pstream__) const;
};
struct get_source_threshold_energy_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& Eth, const std::vector<double>& D,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct dNdE_pl_functor__ {
  template <typename T0__, typename T1__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& E, const T1__& alpha, std::ostream* pstream__) const;
};
struct sample_orthonormal_to_rng_functor__ {
  template <typename T0__, typename RNG,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
  operator()(const T0__& mu, RNG& base_rng__, std::ostream* pstream__) const;
};
struct get_kappa_ex_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>, -1, 1>
  operator()(const T0__& E, const T1__& B, const T2__& D, const int& Z,
             std::ostream* pstream__) const;
};
struct sphere_rng_functor__ {
  template <typename T0__, typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  operator()(const T0__& radius, RNG& base_rng__, std::ostream* pstream__) const;
};
struct spectrum_rng_functor__ {
  template <typename T0__, typename T1__, typename RNG,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  operator()(const T0__& alpha, const T1__& Emin, RNG& base_rng__,
             std::ostream* pstream__) const;
};
struct exposure_limited_vMF_rng_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename RNG,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  operator()(const T0__& varpi, const T1__& kappa, const T2__& a0,
             const T3__& theta_m, RNG& base_rng__, std::ostream* pstream__) const;
};
struct get_arrival_energy_functor__ {
  template <typename T0__,
            stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  operator()(const T0__& E, const std::vector<double>& D,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct E_ode_sim_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__>>
  operator()(const T0__& r, const std::vector<T1__>& state,
             const std::vector<T2__>& params, const std::vector<double>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const;
};
struct integrand_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  operator()(const T0__& xi, const std::vector<T1__>& state,
             const std::vector<T2__>& params, const std::vector<T3__>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const;
};
struct dEdr_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  operator()(const T0__& r, const T1__& E, const std::vector<T2__>& xiout,
             const std::vector<double>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct E_ode_rev_sim_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__>>
  operator()(const T0__& r, const std::vector<T1__>& state,
             const std::vector<T2__>& params, const std::vector<double>& x_r,
             const std::vector<int>& x_i, std::ostream* pstream__) const;
};
struct get_eps_from_kappa_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>, -1, 1>
  operator()(const T0__& kappa_grid,
             const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
             const T2__& kappa_ex, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  dNdE_pl(const T0__& E, const T1__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ spec = DUMMY_VAR__;
      current_statement__ = 28;
      spec = stan::math::pow(E, -alpha);
      current_statement__ = 29;
      return spec;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  spectrum_rng(const T0__& alpha, const T1__& Emin, RNG& base_rng__,
               std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ E = DUMMY_VAR__;
      local_scalar_t__ d = DUMMY_VAR__;
      local_scalar_t__ d_upp_lim = DUMMY_VAR__;
      current_statement__ = 33;
      d_upp_lim = dNdE_pl(Emin, alpha, pstream__);
      int accept = std::numeric_limits<int>::min();
      current_statement__ = 34;
      accept = 0;
      current_statement__ = 41;
      while (stan::math::logical_neq(accept, 1)) {
        current_statement__ = 35;
        E = stan::math::uniform_rng(Emin, 1e4, base_rng__);
        current_statement__ = 36;
        d = stan::math::uniform_rng(0, d_upp_lim, base_rng__);
        current_statement__ = 39;
        if (stan::math::logical_lt(d, dNdE_pl(E, alpha, pstream__))) {
          current_statement__ = 37;
          accept = 1;
        } 
      }
      current_statement__ = 42;
      return E;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  spectrum_lpdf(const T0__& E, const T1__& alpha, const T2__& Emin,
                std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ norm = DUMMY_VAR__;
      current_statement__ = 44;
      norm = (stan::math::log((alpha - 1)) - stan::math::log(Emin));
      local_scalar_t__ lprob = DUMMY_VAR__;
      current_statement__ = 45;
      lprob = (-alpha * stan::math::log((E / Emin)));
      current_statement__ = 46;
      return (lprob + norm);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  beta_pi(const T0__& z, const T1__& E, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ output = DUMMY_VAR__;
      local_scalar_t__ check = DUMMY_VAR__;
      current_statement__ = 49;
      check = ((6.86 * stan::math::exp((-0.807 * z))) * 1e20);
      std::vector<local_scalar_t__> p =
         std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      current_statement__ = 51;
      stan::model::assign(p, 3.66e-8,
        "assigning variable p", stan::model::index_uni(1));
      current_statement__ = 52;
      stan::model::assign(p, 2.87e20,
        "assigning variable p", stan::model::index_uni(2));
      current_statement__ = 53;
      stan::model::assign(p, 2.42e-8,
        "assigning variable p", stan::model::index_uni(3));
      current_statement__ = 56;
      if (stan::math::logical_lte(E, check)) {
        current_statement__ = 54;
        output = ((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                    stan::math::pow((1 + z), 3)) *
                   stan::math::exp(
                     (-stan::model::rvalue(p, "p", stan::model::index_uni(2))
                       / ((1 + z) * E))));
      } 
      current_statement__ = 59;
      if (stan::math::logical_gt(E, check)) {
        current_statement__ = 57;
        output = (stan::model::rvalue(p, "p", stan::model::index_uni(3)) *
                   stan::math::pow((1 + z), 3));
      } 
      current_statement__ = 60;
      return output;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  beta_adi(const T0__& z, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> lCDM =
         std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      local_scalar_t__ a = DUMMY_VAR__;
      local_scalar_t__ b = DUMMY_VAR__;
      local_scalar_t__ H0_si = DUMMY_VAR__;
      current_statement__ = 65;
      H0_si = 70;
      local_scalar_t__ H0 = DUMMY_VAR__;
      current_statement__ = 66;
      H0 = (((H0_si / 3.086e22) * 1.0e3) * 3.154e7);
      current_statement__ = 67;
      stan::model::assign(lCDM, 0.3,
        "assigning variable lCDM", stan::model::index_uni(1));
      current_statement__ = 68;
      stan::model::assign(lCDM, 0.7,
        "assigning variable lCDM", stan::model::index_uni(2));
      current_statement__ = 69;
      a = (stan::model::rvalue(lCDM, "lCDM", stan::model::index_uni(1)) *
            stan::math::pow((1 + z), 3));
      current_statement__ = 70;
      b = (1 - (stan::math::sum(lCDM) * stan::math::pow((1 + z), 2)));
      current_statement__ = 71;
      return (H0 *
               stan::math::pow(
                 ((a +
                    stan::model::rvalue(lCDM, "lCDM",
                      stan::model::index_uni(2))) + b), 0.5));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  phi_inf(const T0__& xi, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> d =
         std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      local_scalar_t__ sum_term = DUMMY_VAR__;
      current_statement__ = 74;
      sum_term = 0;
      current_statement__ = 75;
      stan::model::assign(d, -86.07,
        "assigning variable d", stan::model::index_uni(1));
      current_statement__ = 76;
      stan::model::assign(d, 50.96,
        "assigning variable d", stan::model::index_uni(2));
      current_statement__ = 77;
      stan::model::assign(d, -14.45,
        "assigning variable d", stan::model::index_uni(3));
      current_statement__ = 78;
      stan::model::assign(d, (8.0 / 3.0),
        "assigning variable d", stan::model::index_uni(4));
      current_statement__ = 81;
      for (int i = 1; i <= stan::math::num_elements(d); ++i) {
        current_statement__ = 79;
        sum_term = (sum_term +
                     (stan::model::rvalue(d, "d", stan::model::index_uni(i))
                       * stan::math::pow(stan::math::log(xi), (i - 1))));
      }
      current_statement__ = 82;
      return (xi * sum_term);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  get_phi(const T0__& xi, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ output = DUMMY_VAR__;
      local_scalar_t__ sum_term = DUMMY_VAR__;
      local_scalar_t__ phi_inf_term = DUMMY_VAR__;
      std::vector<local_scalar_t__> c =
         std::vector<local_scalar_t__>(4, DUMMY_VAR__);
      std::vector<local_scalar_t__> f =
         std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      current_statement__ = 113;
      if (stan::math::logical_eq(xi, 2)) {
        current_statement__ = 111;
        output = (stan::math::pi() / 12);
      } else {
        current_statement__ = 110;
        if (stan::math::logical_lt(xi, 25)) {
          current_statement__ = 100;
          stan::model::assign(c, 0.8048,
            "assigning variable c", stan::model::index_uni(1));
          current_statement__ = 101;
          stan::model::assign(c, 0.1459,
            "assigning variable c", stan::model::index_uni(2));
          current_statement__ = 102;
          stan::model::assign(c, 1.137e-3,
            "assigning variable c", stan::model::index_uni(3));
          current_statement__ = 103;
          stan::model::assign(c, -3.879e-6,
            "assigning variable c", stan::model::index_uni(4));
          current_statement__ = 104;
          sum_term = 0;
          current_statement__ = 107;
          for (int i = 1; i <= stan::math::num_elements(c); ++i) {
            current_statement__ = 105;
            sum_term = (sum_term +
                         (stan::model::rvalue(c, "c",
                            stan::model::index_uni(i)) *
                           stan::math::pow((xi - 2), i)));
          }
          current_statement__ = 108;
          output = (((stan::math::pi() / 12) * stan::math::pow((xi - 2), 4))
                     / (1 + sum_term));
        } else {
          current_statement__ = 99;
          if (stan::math::logical_gte(xi, 25)) {
            current_statement__ = 89;
            stan::model::assign(f, 2.910,
              "assigning variable f", stan::model::index_uni(1));
            current_statement__ = 90;
            stan::model::assign(f, 78.35,
              "assigning variable f", stan::model::index_uni(2));
            current_statement__ = 91;
            stan::model::assign(f, 1837,
              "assigning variable f", stan::model::index_uni(3));
            current_statement__ = 92;
            phi_inf_term = phi_inf(xi, pstream__);
            current_statement__ = 93;
            sum_term = 0;
            current_statement__ = 96;
            for (int i = 1; i <= stan::math::num_elements(f); ++i) {
              current_statement__ = 94;
              sum_term = (sum_term +
                           (stan::model::rvalue(f, "f",
                              stan::model::index_uni(i)) *
                             stan::math::pow(xi, -i)));
            }
            current_statement__ = 97;
            output = (phi_inf_term / (1 - sum_term));
          } 
        }
      }
      current_statement__ = 114;
      return output;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  phi_integrand(const T0__& xi, const T1__& E, const T2__& z,
                std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ num = DUMMY_VAR__;
      current_statement__ = 116;
      num = get_phi(xi, pstream__);
      local_scalar_t__ B = DUMMY_VAR__;
      current_statement__ = 117;
      B = 1.02;
      local_scalar_t__ denom = DUMMY_VAR__;
      current_statement__ = 118;
      denom = (stan::math::exp(((B * xi) / ((1 + z) * E))) - 1);
      current_statement__ = 119;
      return (num / denom);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  integrand(const T0__& xi, const std::vector<T1__>& state,
            const std::vector<T2__>& params, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> dstatedxi =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 122;
      E = stan::model::rvalue(params, "params", stan::model::index_uni(1));
      local_scalar_t__ z = DUMMY_VAR__;
      current_statement__ = 123;
      z = stan::model::rvalue(params, "params", stan::model::index_uni(2));
      current_statement__ = 124;
      stan::model::assign(dstatedxi, phi_integrand(xi, E, z, pstream__),
        "assigning variable dstatedxi", stan::model::index_uni(1));
      current_statement__ = 125;
      return dstatedxi;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  beta_bh(const T0__& z, const T1__& E, const std::vector<T2__>& xiout,
          const std::vector<double>& x_r, const std::vector<int>& x_i,
          std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(2, DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> integration_result =
         std::vector<std::vector<local_scalar_t__>>(1, 
           std::vector<local_scalar_t__>(1, DUMMY_VAR__));
      std::vector<local_scalar_t__> state0 =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      local_scalar_t__ integ = DUMMY_VAR__;
      local_scalar_t__ A = DUMMY_VAR__;
      current_statement__ = 131;
      A = 3.44e-18;
      current_statement__ = 132;
      stan::model::assign(state0, phi_integrand(2.0, E, z, pstream__),
        "assigning variable state0", stan::model::index_uni(1));
      current_statement__ = 133;
      stan::model::assign(params, E,
        "assigning variable params", stan::model::index_uni(1));
      current_statement__ = 134;
      stan::model::assign(params, z,
        "assigning variable params", stan::model::index_uni(2));
      current_statement__ = 135;
      stan::model::assign(integration_result,
        stan::math::integrate_ode_rk45(integrand_functor__(), state0, 2.0,
          xiout, params, x_r, x_i, pstream__),
        "assigning variable integration_result");
      current_statement__ = 136;
      integ = stan::model::rvalue(integration_result, "integration_result",
                stan::model::index_uni(1), stan::model::index_uni(1));
      current_statement__ = 137;
      return ((A / stan::math::pow(E, 3)) * integ);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  beta_bh_approx(const T0__& z, const T1__& E, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ A = DUMMY_VAR__;
      current_statement__ = 139;
      A = 3.44e-18;
      local_scalar_t__ B = DUMMY_VAR__;
      current_statement__ = 140;
      B = ((3.10075045 * z) - 4.68161976);
      local_scalar_t__ C = DUMMY_VAR__;
      current_statement__ = 141;
      C = ((2.08663474 * z) + 3.8072154);
      local_scalar_t__ integ = DUMMY_VAR__;
      current_statement__ = 142;
      integ = (stan::math::pow(E, (2.4211487 * stan::math::exp((B / E)))) *
                stan::math::exp(C));
      current_statement__ = 143;
      return ((A / stan::math::pow(E, 3)) * integ);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  dEdr(const T0__& r, const T1__& E, const std::vector<T2__>& xiout,
       const std::vector<double>& x_r, const std::vector<int>& x_i,
       std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 145;
      c = 3.066e-7;
      local_scalar_t__ DH = DUMMY_VAR__;
      current_statement__ = 146;
      DH = 4285.714;
      local_scalar_t__ z = DUMMY_VAR__;
      current_statement__ = 147;
      z = (r / DH);
      local_scalar_t__ beta_pp = DUMMY_VAR__;
      local_scalar_t__ Ltot = DUMMY_VAR__;
      current_statement__ = 150;
      beta_pp = (3.154e7 *
                  beta_bh(z, (E / 1.0e18), xiout, x_r, x_i, pstream__));
      current_statement__ = 151;
      Ltot = (c /
               ((beta_adi(z, pstream__) + beta_pi(z, E, pstream__)) +
                 beta_pp));
      current_statement__ = 152;
      return (-E / Ltot);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__>>
  E_ode_sim(const T0__& r, const std::vector<T1__>& state,
            const std::vector<T2__>& params, const std::vector<double>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> dstatedr =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 155;
      E = stan::model::rvalue(state, "state", stan::model::index_uni(1));
      current_statement__ = 156;
      stan::model::assign(dstatedr, dEdr(r, E, x_r, x_r, x_i, pstream__),
        "assigning variable dstatedr", stan::model::index_uni(1));
      current_statement__ = 157;
      return dstatedr;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__>>
  E_ode_rev_sim(const T0__& r, const std::vector<T1__>& state,
                const std::vector<T2__>& params,
                const std::vector<double>& x_r, const std::vector<int>& x_i,
                std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> dstatedr =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      local_scalar_t__ D = DUMMY_VAR__;
      current_statement__ = 160;
      D = stan::model::rvalue(params, "params", stan::model::index_uni(1));
      local_scalar_t__ r_rev = DUMMY_VAR__;
      current_statement__ = 161;
      r_rev = (D - r);
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 162;
      E = stan::model::rvalue(state, "state", stan::model::index_uni(1));
      current_statement__ = 163;
      stan::model::assign(dstatedr,
        -dEdr(r_rev, E, x_r, x_r, x_i, pstream__),
        "assigning variable dstatedr", stan::model::index_uni(1));
      current_statement__ = 164;
      return dstatedr;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  get_source_threshold_energy_sim(const T0__& Eth,
                                  const std::vector<double>& D,
                                  const std::vector<double>& x_r,
                                  const std::vector<int>& x_i,
                                  std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ Eth_src = DUMMY_VAR__;
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> integration_result =
         std::vector<std::vector<local_scalar_t__>>(1, 
           std::vector<local_scalar_t__>(1, DUMMY_VAR__));
      std::vector<local_scalar_t__> Eth_in =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 170;
      stan::model::assign(Eth_in, (Eth * 1.0e18),
        "assigning variable Eth_in", stan::model::index_uni(1));
      current_statement__ = 171;
      stan::model::assign(params,
        stan::model::rvalue(D, "D", stan::model::index_uni(1)),
        "assigning variable params", stan::model::index_uni(1));
      current_statement__ = 172;
      stan::model::assign(integration_result,
        stan::math::integrate_ode_rk45(E_ode_rev_sim_functor__(), Eth_in,
          0.0, D, params, x_r, x_i, pstream__),
        "assigning variable integration_result");
      current_statement__ = 173;
      Eth_src = (stan::model::rvalue(integration_result,
                   "integration_result",
                   stan::model::index_uni(1), stan::model::index_uni(1)) /
                  1.0e18);
      current_statement__ = 174;
      return Eth_src;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  get_Eth_src_sim(const T0__& Eth, const std::vector<std::vector<double>>& D,
                  const std::vector<double>& x_r,
                  const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 176;
      N = stan::math::num_elements(D);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("Eth_src", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> Eth_src =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 181;
      for (int k = 1; k <= N; ++k) {
        current_statement__ = 179;
        stan::model::assign(Eth_src,
          get_source_threshold_energy_sim(Eth,
            stan::model::rvalue(D, "D", stan::model::index_uni(k)), x_r,
            x_i, pstream__),
          "assigning variable Eth_src", stan::model::index_uni(k));
      }
      current_statement__ = 182;
      return Eth_src;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  get_arrival_energy_sim(const T0__& E, const std::vector<double>& D,
                         const std::vector<double>& x_r,
                         const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ Earr = DUMMY_VAR__;
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(0, DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> integration_result =
         std::vector<std::vector<local_scalar_t__>>(1, 
           std::vector<local_scalar_t__>(1, DUMMY_VAR__));
      std::vector<local_scalar_t__> E_in =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 188;
      stan::model::assign(E_in, (E * 1.0e18),
        "assigning variable E_in", stan::model::index_uni(1));
      current_statement__ = 189;
      stan::model::assign(integration_result,
        stan::math::integrate_ode_rk45(E_ode_sim_functor__(), E_in, 0.0, D,
          params, x_r, x_i, pstream__),
        "assigning variable integration_result");
      current_statement__ = 190;
      Earr = (stan::model::rvalue(integration_result, "integration_result",
                stan::model::index_uni(1), stan::model::index_uni(1)) /
               1.0e18);
      current_statement__ = 191;
      return Earr;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  dEdr_approx(const T0__& r, const T1__& E, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 193;
      c = 3.066e-7;
      local_scalar_t__ DH = DUMMY_VAR__;
      current_statement__ = 194;
      DH = 4285.714;
      local_scalar_t__ z = DUMMY_VAR__;
      current_statement__ = 195;
      z = (r / DH);
      local_scalar_t__ beta_pp = DUMMY_VAR__;
      local_scalar_t__ Ltot = DUMMY_VAR__;
      current_statement__ = 198;
      beta_pp = (3.154e7 * beta_bh_approx(z, (E / 1.0e18), pstream__));
      current_statement__ = 199;
      Ltot = (c /
               ((beta_adi(z, pstream__) + beta_pi(z, E, pstream__)) +
                 beta_pp));
      current_statement__ = 200;
      return (-E / Ltot);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  E_ode(const T0__& r, const std::vector<T1__>& state,
        const std::vector<T2__>& params, const std::vector<T3__>& x_r,
        const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> dstatedr =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 203;
      E = stan::model::rvalue(state, "state", stan::model::index_uni(1));
      current_statement__ = 204;
      stan::model::assign(dstatedr, dEdr_approx(r, E, pstream__),
        "assigning variable dstatedr", stan::model::index_uni(1));
      current_statement__ = 205;
      return dstatedr;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
  E_ode_rev(const T0__& r, const std::vector<T1__>& state,
            const std::vector<T2__>& params, const std::vector<T3__>& x_r,
            const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> dstatedr =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      local_scalar_t__ D = DUMMY_VAR__;
      current_statement__ = 208;
      D = stan::model::rvalue(params, "params", stan::model::index_uni(1));
      local_scalar_t__ r_rev = DUMMY_VAR__;
      current_statement__ = 209;
      r_rev = (D - r);
      local_scalar_t__ E = DUMMY_VAR__;
      current_statement__ = 210;
      E = stan::model::rvalue(state, "state", stan::model::index_uni(1));
      current_statement__ = 211;
      stan::model::assign(dstatedr, -dEdr_approx(r_rev, E, pstream__),
        "assigning variable dstatedr", stan::model::index_uni(1));
      current_statement__ = 212;
      return dstatedr;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  get_source_threshold_energy(const T0__& Eth, const std::vector<double>& D,
                              const std::vector<double>& x_r,
                              const std::vector<int>& x_i,
                              std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ Eth_src = DUMMY_VAR__;
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> integration_result =
         std::vector<std::vector<local_scalar_t__>>(1, 
           std::vector<local_scalar_t__>(1, DUMMY_VAR__));
      std::vector<local_scalar_t__> Eth_in =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 218;
      stan::model::assign(Eth_in, (Eth * 1.0e18),
        "assigning variable Eth_in", stan::model::index_uni(1));
      current_statement__ = 219;
      stan::model::assign(params,
        stan::model::rvalue(D, "D", stan::model::index_uni(1)),
        "assigning variable params", stan::model::index_uni(1));
      current_statement__ = 220;
      stan::model::assign(integration_result,
        stan::math::integrate_ode_rk45(E_ode_rev_functor__(), Eth_in, 0.0, D,
          params, x_r, x_i, pstream__),
        "assigning variable integration_result");
      current_statement__ = 221;
      Eth_src = (stan::model::rvalue(integration_result,
                   "integration_result",
                   stan::model::index_uni(1), stan::model::index_uni(1)) /
                  1.0e18);
      current_statement__ = 222;
      return Eth_src;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  get_Eth_src(const T0__& Eth, const std::vector<std::vector<double>>& D,
              const std::vector<double>& x_r, const std::vector<int>& x_i,
              std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 224;
      N = stan::math::num_elements(D);
      current_statement__ = 225;
      stan::math::validate_non_negative_index("Eth_src", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> Eth_src =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 229;
      for (int k = 1; k <= N; ++k) {
        current_statement__ = 227;
        stan::model::assign(Eth_src,
          get_source_threshold_energy(Eth,
            stan::model::rvalue(D, "D", stan::model::index_uni(k)), x_r,
            x_i, pstream__),
          "assigning variable Eth_src", stan::model::index_uni(k));
      }
      current_statement__ = 230;
      return Eth_src;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  get_arrival_energy(const T0__& E, const std::vector<double>& D,
                     const std::vector<double>& x_r,
                     const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ Earr = DUMMY_VAR__;
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(0, DUMMY_VAR__);
      std::vector<std::vector<local_scalar_t__>> integration_result =
         std::vector<std::vector<local_scalar_t__>>(1, 
           std::vector<local_scalar_t__>(1, DUMMY_VAR__));
      std::vector<local_scalar_t__> E_in =
         std::vector<local_scalar_t__>(1, DUMMY_VAR__);
      current_statement__ = 236;
      stan::model::assign(E_in, (E * 1.0e18),
        "assigning variable E_in", stan::model::index_uni(1));
      current_statement__ = 237;
      stan::model::assign(integration_result,
        stan::math::integrate_ode_rk45(E_ode_functor__(), E_in, 0.0, D,
          params, x_r, x_i, pstream__),
        "assigning variable integration_result");
      current_statement__ = 238;
      Earr = (stan::model::rvalue(integration_result, "integration_result",
                stan::model::index_uni(1), stan::model::index_uni(1)) /
               1.0e18);
      current_statement__ = 239;
      return Earr;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  abs_val(const T0__& input_vector_arg__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& input_vector = stan::math::to_ref(input_vector_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ av = DUMMY_VAR__;
      int n = std::numeric_limits<int>::min();
      current_statement__ = 242;
      n = stan::math::num_elements(input_vector);
      local_scalar_t__ sum_squares = DUMMY_VAR__;
      current_statement__ = 243;
      sum_squares = 0;
      current_statement__ = 246;
      for (int i = 1; i <= n; ++i) {
        current_statement__ = 244;
        sum_squares = (sum_squares +
                        (stan::model::rvalue(input_vector, "input_vector",
                           stan::model::index_uni(i)) *
                          stan::model::rvalue(input_vector, "input_vector",
                            stan::model::index_uni(i))));
      }
      current_statement__ = 247;
      av = stan::math::sqrt(sum_squares);
      current_statement__ = 248;
      return av;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
  sample_orthonormal_to_rng(const T0__& mu_arg__, RNG& base_rng__,
                            std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& mu = stan::math::to_ref(mu_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int dim = std::numeric_limits<int>::min();
      current_statement__ = 250;
      dim = stan::math::num_elements(mu);
      current_statement__ = 251;
      stan::math::validate_non_negative_index("v", "dim", dim);
      Eigen::Matrix<local_scalar_t__, -1, 1> v =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(dim, DUMMY_VAR__);
      current_statement__ = 253;
      stan::math::validate_non_negative_index("proj_mu_v", "dim", dim);
      Eigen::Matrix<local_scalar_t__, -1, 1> proj_mu_v =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(dim, DUMMY_VAR__);
      current_statement__ = 255;
      stan::math::validate_non_negative_index("orthto", "dim", dim);
      Eigen::Matrix<local_scalar_t__, -1, 1> orthto =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(dim, DUMMY_VAR__);
      current_statement__ = 259;
      for (int i = 1; i <= dim; ++i) {
        current_statement__ = 257;
        stan::model::assign(v, stan::math::normal_rng(0, 1, base_rng__),
          "assigning variable v", stan::model::index_uni(i));
      }
      current_statement__ = 260;
      stan::model::assign(proj_mu_v,
        stan::math::divide(
          stan::math::multiply(mu, stan::math::dot_product(mu, v)),
          abs_val(mu, pstream__)), "assigning variable proj_mu_v");
      current_statement__ = 261;
      stan::model::assign(orthto, stan::math::subtract(v, proj_mu_v),
        "assigning variable orthto");
      current_statement__ = 262;
      return stan::math::divide(orthto, abs_val(orthto, pstream__));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  stan::promote_args_t<T0__>
  sample_weight_rng(const T0__& kappa, const int& dim, RNG& base_rng__,
                    std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ sdim = DUMMY_VAR__;
      current_statement__ = 264;
      sdim = (dim - 1);
      local_scalar_t__ b = DUMMY_VAR__;
      current_statement__ = 265;
      b = (sdim /
            (stan::math::sqrt(
               ((4. * stan::math::pow(kappa, 2)) + stan::math::pow(sdim, 2)))
              + (2 * kappa)));
      local_scalar_t__ x = DUMMY_VAR__;
      current_statement__ = 266;
      x = ((1 - b) / (1 + b));
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 267;
      c = ((kappa * x) +
            (sdim * stan::math::log((1 - stan::math::pow(x, 2)))));
      int i = std::numeric_limits<int>::min();
      current_statement__ = 268;
      i = 0;
      local_scalar_t__ z = DUMMY_VAR__;
      local_scalar_t__ w = DUMMY_VAR__;
      local_scalar_t__ u = DUMMY_VAR__;
      current_statement__ = 279;
      while (stan::math::logical_eq(i, 0)) {
        current_statement__ = 272;
        z = stan::math::beta_rng((sdim / 2), (sdim / 2), base_rng__);
        current_statement__ = 273;
        w = ((1 - ((1 + b) * z)) / (1 - ((1 - b) * z)));
        current_statement__ = 274;
        u = stan::math::uniform_rng(0, 1, base_rng__);
        current_statement__ = 277;
        if (stan::math::logical_gte(
              (((kappa * w) + (sdim * stan::math::log((1 - (x * w))))) - c),
              stan::math::log(u))) {
          current_statement__ = 275;
          i = 1;
        } 
      }
      current_statement__ = 280;
      return w;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>, -1, 1>
  vMF_rng(const T0__& mu_arg__, const T1__& kappa, RNG& base_rng__,
          std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__>;
    int current_statement__ = 0; 
    const auto& mu = stan::math::to_ref(mu_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int dim = std::numeric_limits<int>::min();
      current_statement__ = 282;
      dim = stan::math::num_elements(mu);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("result", "dim", dim);
      Eigen::Matrix<local_scalar_t__, -1, 1> result =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(dim, DUMMY_VAR__);
      local_scalar_t__ w = DUMMY_VAR__;
      current_statement__ = 285;
      w = sample_weight_rng(kappa, dim, base_rng__, pstream__);
      current_statement__ = 286;
      stan::math::validate_non_negative_index("v", "dim", dim);
      Eigen::Matrix<local_scalar_t__, -1, 1> v =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(dim, DUMMY_VAR__);
      current_statement__ = 287;
      stan::model::assign(v,
        sample_orthonormal_to_rng(mu, base_rng__, pstream__),
        "assigning variable v");
      current_statement__ = 288;
      stan::model::assign(result,
        stan::math::add(
          stan::math::multiply(v,
            stan::math::sqrt((1 - stan::math::pow(w, 2)))),
          stan::math::multiply(w, mu)), "assigning variable result");
      current_statement__ = 289;
      return result;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
  sphere_rng(const T0__& radius, RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> result =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      local_scalar_t__ u = DUMMY_VAR__;
      current_statement__ = 292;
      u = stan::math::uniform_rng(0, 1, base_rng__);
      local_scalar_t__ v = DUMMY_VAR__;
      current_statement__ = 293;
      v = stan::math::uniform_rng(0, 1, base_rng__);
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 294;
      theta = ((2 * stan::math::pi()) * u);
      local_scalar_t__ phi = DUMMY_VAR__;
      current_statement__ = 295;
      phi = stan::math::acos(((2 * v) - 1));
      current_statement__ = 296;
      stan::model::assign(result,
        ((radius * stan::math::cos(theta)) * stan::math::sin(phi)),
        "assigning variable result", stan::model::index_uni(1));
      current_statement__ = 297;
      stan::model::assign(result,
        ((radius * stan::math::sin(theta)) * stan::math::sin(phi)),
        "assigning variable result", stan::model::index_uni(2));
      current_statement__ = 298;
      stan::model::assign(result, (radius * stan::math::cos(phi)),
        "assigning variable result", stan::model::index_uni(3));
      current_statement__ = 299;
      return result;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  xi_exp(const T0__& theta, const std::vector<T1__>& p,
         std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 301;
      return ((stan::model::rvalue(p, "p", stan::model::index_uni(3)) -
                (stan::model::rvalue(p, "p", stan::model::index_uni(2)) *
                  stan::math::cos(theta))) /
               (stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                 stan::math::sin(theta)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  alpha_m(const T0__& theta, const std::vector<T1__>& p,
          std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ am = DUMMY_VAR__;
      local_scalar_t__ xi_val = DUMMY_VAR__;
      current_statement__ = 304;
      xi_val = xi_exp(theta, p, pstream__);
      current_statement__ = 312;
      if (stan::math::logical_gt(xi_val, 1)) {
        current_statement__ = 310;
        am = 0;
      } else {
        current_statement__ = 309;
        if (stan::math::logical_lt(xi_val, -1)) {
          current_statement__ = 307;
          am = stan::math::pi();
        } else {
          current_statement__ = 305;
          am = stan::math::acos(xi_val);
        }
      }
      current_statement__ = 313;
      return am;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  m(const T0__& theta, const std::vector<T1__>& p, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 315;
      return (((stan::model::rvalue(p, "p", stan::model::index_uni(1)) *
                 stan::math::sin(theta)) *
                stan::math::sin(alpha_m(theta, p, pstream__))) +
               ((alpha_m(theta, p, pstream__) *
                  stan::model::rvalue(p, "p", stan::model::index_uni(2))) *
                 stan::math::cos(theta)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>
  get_source_weights(const std::vector<T0__>& Q, const std::vector<T1__>& D,
                     std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 317;
      N = stan::math::num_elements(D);
      current_statement__ = 318;
      stan::math::validate_non_negative_index("weights", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> weights =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ normalisation = DUMMY_VAR__;
      current_statement__ = 320;
      normalisation = 0;
      current_statement__ = 323;
      for (int k = 1; k <= N; ++k) {
        current_statement__ = 321;
        normalisation = (normalisation +
                          (stan::model::rvalue(Q, "Q",
                             stan::model::index_uni(k)) /
                            stan::math::pow(
                              stan::model::rvalue(D, "D",
                                stan::model::index_uni(k)), 2)));
      }
      current_statement__ = 326;
      for (int k = 1; k <= N; ++k) {
        current_statement__ = 324;
        stan::model::assign(weights,
          ((stan::model::rvalue(Q, "Q", stan::model::index_uni(k)) /
             stan::math::pow(
               stan::model::rvalue(D, "D", stan::model::index_uni(k)), 2)) /
            normalisation),
          "assigning variable weights", stan::model::index_uni(k));
      }
      current_statement__ = 327;
      return weights;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                     stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
  get_exposure_weights(const T0__& F_arg__, const T1__& eps_arg__,
                       const T2__& alpha_T, const T3__& Eth_src_arg__,
                       const T4__& Eth, const T5__& alpha,
                       std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>, T2__,
                                 stan::base_type_t<T3__>, T4__,
                                 stan::promote_args_t<T5__>>;
    int current_statement__ = 0; 
    const auto& F = stan::math::to_ref(F_arg__);
    const auto& eps = stan::math::to_ref(eps_arg__);
    const auto& Eth_src = stan::math::to_ref(Eth_src_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 329;
      N = stan::math::num_elements(F);
      current_statement__ = 330;
      stan::math::validate_non_negative_index("weights", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> weights =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      local_scalar_t__ normalisation = DUMMY_VAR__;
      current_statement__ = 332;
      normalisation = 0;
      current_statement__ = 335;
      for (int k = 1; k <= (N - 1); ++k) {
        current_statement__ = 333;
        normalisation = (normalisation +
                          ((stan::model::rvalue(F, "F",
                              stan::model::index_uni(k)) *
                             stan::model::rvalue(eps, "eps",
                               stan::model::index_uni(k))) *
                            stan::math::pow(
                              (stan::model::rvalue(Eth_src, "Eth_src",
                                 stan::model::index_uni(k)) / Eth),
                              (1 - alpha))));
      }
      current_statement__ = 336;
      normalisation = (normalisation +
                        (stan::model::rvalue(F, "F",
                           stan::model::index_uni(N)) *
                          (alpha_T / (4 * stan::math::pi()))));
      current_statement__ = 339;
      for (int k = 1; k <= (N - 1); ++k) {
        current_statement__ = 337;
        stan::model::assign(weights,
          (((stan::model::rvalue(F, "F", stan::model::index_uni(k)) *
              stan::model::rvalue(eps, "eps", stan::model::index_uni(k))) *
             stan::math::pow(
               (stan::model::rvalue(Eth_src, "Eth_src",
                  stan::model::index_uni(k)) / Eth), (1 - alpha))) /
            normalisation),
          "assigning variable weights", stan::model::index_uni(k));
      }
      current_statement__ = 340;
      stan::model::assign(weights,
        ((stan::model::rvalue(F, "F", stan::model::index_uni(N)) *
           (alpha_T / (4 * stan::math::pi()))) / normalisation),
        "assigning variable weights", stan::model::index_uni(N));
      current_statement__ = 341;
      return weights;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>>
  omega_to_theta(const T0__& omega_arg__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>>;
    int current_statement__ = 0; 
    const auto& omega = stan::math::to_ref(omega_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ theta = DUMMY_VAR__;
      int N = std::numeric_limits<int>::min();
      current_statement__ = 344;
      N = stan::math::num_elements(omega);
      current_statement__ = 347;
      if (stan::math::logical_neq(N, 3)) {
        current_statement__ = 345;
        if (pstream__) {
          stan::math::stan_print(pstream__, "Error: input vector omega must be of 3 dimensions");
          stan::math::stan_print(pstream__, "\n");
        }
      } 
      current_statement__ = 348;
      theta = stan::math::acos(
                stan::model::rvalue(omega, "omega",
                  stan::model::index_uni(3)));
      current_statement__ = 349;
      return theta;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                     stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__>>
  get_Nex_sim(const T0__& F_arg__, const T1__& eps_arg__,
              const T2__& alpha_T, const T3__& Eth_src_arg__,
              const T4__& Eth, const T5__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>, T2__,
                                 stan::base_type_t<T3__>, T4__,
                                 stan::promote_args_t<T5__>>;
    int current_statement__ = 0; 
    const auto& F = stan::math::to_ref(F_arg__);
    const auto& eps = stan::math::to_ref(eps_arg__);
    const auto& Eth_src = stan::math::to_ref(Eth_src_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 351;
      N = stan::math::num_elements(F);
      local_scalar_t__ Nex = DUMMY_VAR__;
      current_statement__ = 352;
      Nex = 0;
      current_statement__ = 355;
      for (int k = 1; k <= (N - 1); ++k) {
        current_statement__ = 353;
        Nex = (Nex +
                ((stan::model::rvalue(F, "F", stan::model::index_uni(k)) *
                   stan::model::rvalue(eps, "eps", stan::model::index_uni(k)))
                  *
                  stan::math::pow(
                    (stan::model::rvalue(Eth_src, "Eth_src",
                       stan::model::index_uni(k)) / Eth), (1 - alpha))));
      }
      current_statement__ = 356;
      Nex = (Nex +
              (stan::model::rvalue(F, "F", stan::model::index_uni(N)) *
                (alpha_T / (4 * stan::math::pi()))));
      current_statement__ = 357;
      return Nex;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  stan::promote_args_t<T0__, T1__>
  get_Fs(const std::vector<T0__>& Q, const std::vector<T1__>& D,
         std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 359;
      N = stan::math::num_elements(D);
      local_scalar_t__ Fs = DUMMY_VAR__;
      current_statement__ = 360;
      Fs = 0;
      current_statement__ = 363;
      for (int k = 1; k <= N; ++k) {
        current_statement__ = 361;
        Fs = (Fs +
               (stan::model::rvalue(Q, "Q", stan::model::index_uni(k)) /
                 ((4 * stan::math::pi()) *
                   stan::math::pow(
                     stan::model::rvalue(D, "D", stan::model::index_uni(k)),
                     2))));
      }
      current_statement__ = 364;
      return Fs;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  exposure_limited_vMF_rng(const T0__& varpi_arg__, const T1__& kappa,
                           const T2__& a0, const T3__& theta_m,
                           RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& varpi = stan::math::to_ref(varpi_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      local_scalar_t__ m_max = DUMMY_VAR__;
      local_scalar_t__ accept = DUMMY_VAR__;
      int count = std::numeric_limits<int>::min();
      Eigen::Matrix<local_scalar_t__, -1, 1> omega =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      local_scalar_t__ theta = DUMMY_VAR__;
      local_scalar_t__ pdet = DUMMY_VAR__;
      local_scalar_t__ max_dec = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__, -1, 1> p =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 375;
      stan::model::assign(params, stan::math::cos(a0),
        "assigning variable params", stan::model::index_uni(1));
      current_statement__ = 376;
      stan::model::assign(params, stan::math::sin(a0),
        "assigning variable params", stan::model::index_uni(2));
      current_statement__ = 377;
      stan::model::assign(params, stan::math::cos(theta_m),
        "assigning variable params", stan::model::index_uni(3));
      current_statement__ = 383;
      if (stan::math::logical_lt(a0, 0)) {
        current_statement__ = 381;
        max_dec = stan::math::pi();
      } else {
        current_statement__ = 380;
        if (stan::math::logical_gt(a0, 0)) {
          current_statement__ = 378;
          max_dec = 0.;
        } 
      }
      current_statement__ = 384;
      m_max = m(max_dec, params, pstream__);
      current_statement__ = 385;
      accept = 0;
      current_statement__ = 386;
      count = 0;
      current_statement__ = 399;
      while (stan::math::logical_neq(accept, 1)) {
        current_statement__ = 387;
        stan::model::assign(omega,
          vMF_rng(varpi, kappa, base_rng__, pstream__),
          "assigning variable omega");
        current_statement__ = 388;
        theta = omega_to_theta(omega, pstream__);
        current_statement__ = 389;
        pdet = (m(theta, params, pstream__) / m_max);
        current_statement__ = 390;
        stan::model::assign(p, pdet,
          "assigning variable p", stan::model::index_uni(1));
        current_statement__ = 391;
        stan::model::assign(p, (1 - pdet),
          "assigning variable p", stan::model::index_uni(2));
        current_statement__ = 392;
        accept = stan::math::categorical_rng(p, base_rng__);
        current_statement__ = 393;
        count = (count + 1);
        current_statement__ = 397;
        if (stan::math::logical_gt(count, 1.0e7)) {
          current_statement__ = 394;
          if (pstream__) {
            stan::math::stan_print(pstream__, "Was stuck in exposure_limited_rng");
            stan::math::stan_print(pstream__, "\n");
          }
          current_statement__ = 395;
          accept = 1;
        } 
      }
      current_statement__ = 400;
      return omega;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>
  exposure_limited_sphere_rng(const T0__& a0, const T1__& theta_m,
                              RNG& base_rng__, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      std::vector<local_scalar_t__> params =
         std::vector<local_scalar_t__>(3, DUMMY_VAR__);
      local_scalar_t__ m_max = DUMMY_VAR__;
      local_scalar_t__ accept = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__, -1, 1> omega =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      local_scalar_t__ theta = DUMMY_VAR__;
      local_scalar_t__ pdet = DUMMY_VAR__;
      local_scalar_t__ max_dec = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__, -1, 1> p =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 410;
      stan::model::assign(params, stan::math::cos(a0),
        "assigning variable params", stan::model::index_uni(1));
      current_statement__ = 411;
      stan::model::assign(params, stan::math::sin(a0),
        "assigning variable params", stan::model::index_uni(2));
      current_statement__ = 412;
      stan::model::assign(params, stan::math::cos(theta_m),
        "assigning variable params", stan::model::index_uni(3));
      current_statement__ = 418;
      if (stan::math::logical_lt(a0, 0)) {
        current_statement__ = 416;
        max_dec = stan::math::pi();
      } else {
        current_statement__ = 415;
        if (stan::math::logical_gt(a0, 0)) {
          current_statement__ = 413;
          max_dec = 0.;
        } 
      }
      current_statement__ = 419;
      m_max = m(max_dec, params, pstream__);
      current_statement__ = 420;
      accept = 0;
      current_statement__ = 428;
      while (stan::math::logical_neq(accept, 1)) {
        current_statement__ = 421;
        stan::model::assign(omega, sphere_rng(1, base_rng__, pstream__),
          "assigning variable omega");
        current_statement__ = 422;
        theta = omega_to_theta(omega, pstream__);
        current_statement__ = 423;
        pdet = (m(theta, params, pstream__) / m_max);
        current_statement__ = 424;
        stan::model::assign(p, pdet,
          "assigning variable p", stan::model::index_uni(1));
        current_statement__ = 425;
        stan::model::assign(p, (1 - pdet),
          "assigning variable p", stan::model::index_uni(2));
        current_statement__ = 426;
        accept = stan::math::categorical_rng(p, base_rng__);
      }
      current_statement__ = 429;
      return omega;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__>
  interpolate(const T0__& x_values_arg__, const T1__& y_values_arg__,
              const T2__& x, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>, T2__>;
    int current_statement__ = 0; 
    const auto& x_values = stan::math::to_ref(x_values_arg__);
    const auto& y_values = stan::math::to_ref(y_values_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ x_left = DUMMY_VAR__;
      local_scalar_t__ y_left = DUMMY_VAR__;
      local_scalar_t__ x_right = DUMMY_VAR__;
      local_scalar_t__ y_right = DUMMY_VAR__;
      local_scalar_t__ dydx = DUMMY_VAR__;
      int Nx = std::numeric_limits<int>::min();
      current_statement__ = 436;
      Nx = stan::math::num_elements(x_values);
      local_scalar_t__ xmin = DUMMY_VAR__;
      current_statement__ = 437;
      xmin = stan::model::rvalue(x_values, "x_values",
               stan::model::index_uni(1));
      local_scalar_t__ xmax = DUMMY_VAR__;
      current_statement__ = 438;
      xmax = stan::model::rvalue(x_values, "x_values",
               stan::model::index_uni(Nx));
      int i = std::numeric_limits<int>::min();
      current_statement__ = 439;
      i = 1;
      current_statement__ = 447;
      if ((stan::math::primitive_value(stan::math::logical_gt(x, xmax)) ||
          stan::math::primitive_value(stan::math::logical_lt(x, xmin)))) {
        current_statement__ = 445;
        if (stan::math::logical_gt(x, xmax)) {
          current_statement__ = 443;
          return stan::model::rvalue(y_values, "y_values",
                   stan::model::index_uni(Nx));
        } else {
          current_statement__ = 442;
          if (stan::math::logical_lt(x, xmin)) {
            current_statement__ = 440;
            return stan::model::rvalue(y_values, "y_values",
                     stan::model::index_uni(1));
          } 
        }
      } 
      current_statement__ = 454;
      if (stan::math::logical_gte(x,
            stan::model::rvalue(x_values, "x_values",
              stan::model::index_uni((Nx - 1))))) {
        current_statement__ = 452;
        i = (Nx - 1);
      } else {
        current_statement__ = 450;
        while (stan::math::logical_gt(x,
                 stan::model::rvalue(x_values, "x_values",
                   stan::model::index_uni((i + 1))))) {
          current_statement__ = 448;
          i = (i + 1);
        }
      }
      current_statement__ = 455;
      x_left = stan::model::rvalue(x_values, "x_values",
                 stan::model::index_uni(i));
      current_statement__ = 456;
      y_left = stan::model::rvalue(y_values, "y_values",
                 stan::model::index_uni(i));
      current_statement__ = 457;
      x_right = stan::model::rvalue(x_values, "x_values",
                  stan::model::index_uni((i + 1)));
      current_statement__ = 458;
      y_right = stan::model::rvalue(y_values, "y_values",
                  stan::model::index_uni((i + 1)));
      current_statement__ = 459;
      dydx = ((y_right - y_left) / (x_right - x_left));
      current_statement__ = 460;
      return (y_left + (dydx * (x - x_left)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<stan::base_type_t<T5__>, T6__, T7__>>
  get_Nex(const T0__& F_arg__,
          const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
          const T2__& kappa_grid_arg__, const T3__& kappa_arg__,
          const T4__& alpha_T, const T5__& Eth_src_arg__, const T6__& Eth,
          const T7__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>, T4__,
                                 stan::promote_args_t<stan::base_type_t<T5__>,
                                                      T6__, T7__>>;
    int current_statement__ = 0; 
    const auto& F = stan::math::to_ref(F_arg__);
    const auto& kappa_grid = stan::math::to_ref(kappa_grid_arg__);
    const auto& kappa = stan::math::to_ref(kappa_arg__);
    const auto& Eth_src = stan::math::to_ref(Eth_src_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int Ns = std::numeric_limits<int>::min();
      current_statement__ = 462;
      Ns = stan::math::num_elements(F);
      current_statement__ = 463;
      stan::math::validate_non_negative_index("N", "Ns", Ns);
      Eigen::Matrix<local_scalar_t__, -1, 1> N =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(Ns, DUMMY_VAR__);
      local_scalar_t__ eps_from_kappa = DUMMY_VAR__;
      current_statement__ = 469;
      for (int k = 1; k <= (Ns - 1); ++k) {
        current_statement__ = 466;
        eps_from_kappa = interpolate(kappa_grid,
                           stan::model::rvalue(eps, "eps",
                             stan::model::index_uni(k)),
                           stan::model::rvalue(kappa, "kappa",
                             stan::model::index_uni(k)), pstream__);
        current_statement__ = 467;
        stan::model::assign(N,
          ((stan::model::rvalue(F, "F", stan::model::index_uni(k)) *
             eps_from_kappa) *
            stan::math::pow(
              (stan::model::rvalue(Eth_src, "Eth_src",
                 stan::model::index_uni(k)) / Eth), (1 - alpha))),
          "assigning variable N", stan::model::index_uni(k));
      }
      current_statement__ = 470;
      stan::model::assign(N,
        (stan::model::rvalue(F, "F", stan::model::index_uni(Ns)) *
          (alpha_T / (4 * stan::math::pi()))),
        "assigning variable N", stan::model::index_uni(Ns));
      current_statement__ = 471;
      return stan::math::sum(N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                     T3__, T4__>
  get_Nex_arr(const T0__& F_arg__,
              const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
              const T2__& kappa_grid_arg__, const T3__& kappa,
              const T4__& alpha_T, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                                 stan::base_type_t<T2__>, T3__, T4__>;
    int current_statement__ = 0; 
    const auto& F = stan::math::to_ref(F_arg__);
    const auto& kappa_grid = stan::math::to_ref(kappa_grid_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int Ns = std::numeric_limits<int>::min();
      current_statement__ = 473;
      Ns = stan::math::num_elements(F);
      current_statement__ = 474;
      stan::math::validate_non_negative_index("N", "Ns", Ns);
      Eigen::Matrix<local_scalar_t__, -1, 1> N =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(Ns, DUMMY_VAR__);
      local_scalar_t__ eps_from_kappa = DUMMY_VAR__;
      current_statement__ = 480;
      for (int k = 1; k <= (Ns - 1); ++k) {
        current_statement__ = 477;
        eps_from_kappa = interpolate(kappa_grid,
                           stan::model::rvalue(eps, "eps",
                             stan::model::index_uni(k)), kappa, pstream__);
        current_statement__ = 478;
        stan::model::assign(N,
          (stan::model::rvalue(F, "F", stan::model::index_uni(k)) *
            eps_from_kappa),
          "assigning variable N", stan::model::index_uni(k));
      }
      current_statement__ = 481;
      stan::model::assign(N,
        (stan::model::rvalue(F, "F", stan::model::index_uni(Ns)) *
          (alpha_T / (4 * stan::math::pi()))),
        "assigning variable N", stan::model::index_uni(Ns));
      current_statement__ = 482;
      return stan::math::sum(N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                     T3__>
  fik_lpdf(const T0__& v_arg__, const T1__& mu_arg__, const T2__& kappa,
           const T3__& kappa_d, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& v = stan::math::to_ref(v_arg__);
    const auto& mu = stan::math::to_ref(mu_arg__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lprob = DUMMY_VAR__;
      local_scalar_t__ inner = DUMMY_VAR__;
      current_statement__ = 485;
      inner = abs_val(
                stan::math::add(stan::math::multiply(kappa_d, v),
                  stan::math::multiply(kappa, mu)), pstream__);
      current_statement__ = 490;
      if ((stan::math::primitive_value(stan::math::logical_gt(kappa, 100)) ||
          stan::math::primitive_value(stan::math::logical_gt(kappa_d, 100)))) {
        current_statement__ = 488;
        lprob = ((((stan::math::log((kappa * kappa_d)) -
                     stan::math::log(((4 * stan::math::pi()) * inner))) +
                    inner) - (kappa + kappa_d)) + stan::math::log(2));
      } else {
        current_statement__ = 486;
        lprob = (((stan::math::log((kappa * kappa_d)) -
                    stan::math::log(
                      (((4 * stan::math::pi()) * stan::math::sinh(kappa)) *
                        stan::math::sinh(kappa_d)))) +
                   stan::math::log(stan::math::sinh(inner))) -
                  stan::math::log(inner));
      }
      current_statement__ = 491;
      return lprob;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__>
  get_kappa(const T0__& E, const T1__& B, const T2__& D, const int& Z,
            std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 493;
      return (7552 *
               stan::math::inv_square(
                 ((((2.3 * Z) * stan::math::inv((E / 50))) * B) *
                   stan::math::sqrt(D))));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>, -1, 1>
  get_kappa_ex(const T0__& E_arg__, const T1__& B, const T2__& D_arg__,
               const int& Z, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& E = stan::math::to_ref(E_arg__);
    const auto& D = stan::math::to_ref(D_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int Ns = std::numeric_limits<int>::min();
      current_statement__ = 495;
      Ns = stan::math::num_elements(E);
      current_statement__ = 496;
      stan::math::validate_non_negative_index("kappa_ex", "Ns", Ns);
      Eigen::Matrix<local_scalar_t__, -1, 1> kappa_ex =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(Ns, DUMMY_VAR__);
      current_statement__ = 497;
      stan::model::assign(kappa_ex,
        stan::math::multiply(7552,
          stan::math::inv_square(
            stan::math::elt_multiply(
              stan::math::multiply(
                stan::math::multiply((2.3 * Z),
                  stan::math::inv(stan::math::divide(E, 50))), B),
              stan::math::sqrt(D)))), "assigning variable kappa_ex");
      current_statement__ = 498;
      return kappa_ex;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>, -1, 1>
  get_Eex(const T0__& alpha, const T1__& Eth_src_arg__,
          std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::base_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& Eth_src = stan::math::to_ref(Eth_src_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 500;
      N = stan::math::num_elements(Eth_src);
      current_statement__ = 501;
      stan::math::validate_non_negative_index("Eex", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> Eex =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 502;
      stan::model::assign(Eex,
        stan::math::multiply(stan::math::pow(2, (1 / (alpha - 1))),
          stan::model::rvalue(Eth_src, "Eth_src",
            stan::model::index_min_max(1, N))), "assigning variable Eex");
      current_statement__ = 503;
      return Eex;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>, -1, 1>
  get_eps_from_kappa(const T0__& kappa_grid_arg__,
                     const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
                     const T2__& kappa_ex_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                                 stan::base_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& kappa_grid = stan::math::to_ref(kappa_grid_arg__);
    const auto& kappa_ex = stan::math::to_ref(kappa_ex_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 505;
      N = stan::math::num_elements(kappa_ex);
      current_statement__ = 506;
      stan::math::validate_non_negative_index("eps_from_kappa", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> eps_from_kappa =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 510;
      for (int k = 1; k <= N; ++k) {
        current_statement__ = 508;
        stan::model::assign(eps_from_kappa,
          interpolate(kappa_grid,
            stan::model::rvalue(eps, "eps", stan::model::index_uni(k)),
            stan::model::rvalue(kappa_ex, "kappa_ex",
              stan::model::index_uni(k)), pstream__),
          "assigning variable eps_from_kappa", stan::model::index_uni(k));
      }
      current_statement__ = 511;
      return eps_from_kappa;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
beta_pi_functor__::operator()(const T0__& z, const T1__& E,
                              std::ostream* pstream__)  const
{
  return beta_pi(z, E, pstream__);
}

template <bool propto__, typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
spectrum_lpdf_functor__::operator()(const T0__& E, const T1__& alpha,
                                    const T2__& Emin, std::ostream* pstream__) 
const
{
  return spectrum_lpdf<propto__>(E, alpha, Emin, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
E_ode_functor__::operator()(const T0__& r, const std::vector<T1__>& state,
                            const std::vector<T2__>& params,
                            const std::vector<T3__>& x_r,
                            const std::vector<int>& x_i,
                            std::ostream* pstream__)  const
{
  return E_ode(r, state, params, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                     stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<stan::base_type_t<T5__>, T6__, T7__>>
get_Nex_functor__::operator()(const T0__& F,
                              const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
                              const T2__& kappa_grid, const T3__& kappa,
                              const T4__& alpha_T, const T5__& Eth_src,
                              const T6__& Eth, const T7__& alpha,
                              std::ostream* pstream__)  const
{
  return get_Nex(F, eps, kappa_grid, kappa, alpha_T, Eth_src, Eth, alpha,
           pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
m_functor__::operator()(const T0__& theta, const std::vector<T1__>& p,
                        std::ostream* pstream__)  const
{
  return m(theta, p, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
phi_inf_functor__::operator()(const T0__& xi, std::ostream* pstream__)  const
{
  return phi_inf(xi, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
E_ode_rev_functor__::operator()(const T0__& r,
                                const std::vector<T1__>& state,
                                const std::vector<T2__>& params,
                                const std::vector<T3__>& x_r,
                                const std::vector<int>& x_i,
                                std::ostream* pstream__)  const
{
  return E_ode_rev(r, state, params, x_r, x_i, pstream__);
}

template <bool propto__, typename T0__, typename T1__, typename T2__,
          typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                     T3__>
fik_lpdf_functor__::operator()(const T0__& v, const T1__& mu,
                               const T2__& kappa, const T3__& kappa_d,
                               std::ostream* pstream__)  const
{
  return fik_lpdf<propto__>(v, mu, kappa, kappa_d, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
get_Eth_src_functor__::operator()(const T0__& Eth,
                                  const std::vector<std::vector<double>>& D,
                                  const std::vector<double>& x_r,
                                  const std::vector<int>& x_i,
                                  std::ostream* pstream__)  const
{
  return get_Eth_src(Eth, D, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>, -1, 1>
get_Eex_functor__::operator()(const T0__& alpha, const T1__& Eth_src,
                              std::ostream* pstream__)  const
{
  return get_Eex(alpha, Eth_src, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                     stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__>>
get_Nex_sim_functor__::operator()(const T0__& F, const T1__& eps,
                                  const T2__& alpha_T, const T3__& Eth_src,
                                  const T4__& Eth, const T5__& alpha,
                                  std::ostream* pstream__)  const
{
  return get_Nex_sim(F, eps, alpha_T, Eth_src, Eth, alpha, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
beta_adi_functor__::operator()(const T0__& z, std::ostream* pstream__)  const
{
  return beta_adi(z, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
beta_bh_functor__::operator()(const T0__& z, const T1__& E,
                              const std::vector<T2__>& xiout,
                              const std::vector<double>& x_r,
                              const std::vector<int>& x_i,
                              std::ostream* pstream__)  const
{
  return beta_bh(z, E, xiout, x_r, x_i, pstream__);
}

template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
sample_weight_rng_functor__::operator()(const T0__& kappa, const int& dim,
                                        RNG& base_rng__,
                                        std::ostream* pstream__)  const
{
  return sample_weight_rng(kappa, dim, base_rng__, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
beta_bh_approx_functor__::operator()(const T0__& z, const T1__& E,
                                     std::ostream* pstream__)  const
{
  return beta_bh_approx(z, E, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_stan_scalar<T3__>,
                              stan::is_stan_scalar<T4__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>,
                     T3__, T4__>
get_Nex_arr_functor__::operator()(const T0__& F,
                                  const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
                                  const T2__& kappa_grid, const T3__& kappa,
                                  const T4__& alpha_T,
                                  std::ostream* pstream__)  const
{
  return get_Nex_arr(F, eps, kappa_grid, kappa, alpha_T, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__>
interpolate_functor__::operator()(const T0__& x_values, const T1__& y_values,
                                  const T2__& x, std::ostream* pstream__) 
const
{
  return interpolate(x_values, y_values, x, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
get_Fs_functor__::operator()(const std::vector<T0__>& Q,
                             const std::vector<T1__>& D,
                             std::ostream* pstream__)  const
{
  return get_Fs(Q, D, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>, T2__,
                     stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__>>, -1, 1>
get_exposure_weights_functor__::operator()(const T0__& F, const T1__& eps,
                                           const T2__& alpha_T,
                                           const T3__& Eth_src,
                                           const T4__& Eth,
                                           const T5__& alpha,
                                           std::ostream* pstream__)  const
{
  return get_exposure_weights(F, eps, alpha_T, Eth_src, Eth, alpha,
           pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
xi_exp_functor__::operator()(const T0__& theta, const std::vector<T1__>& p,
                             std::ostream* pstream__)  const
{
  return xi_exp(theta, p, pstream__);
}

template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>
exposure_limited_sphere_rng_functor__::operator()(const T0__& a0,
                                                  const T1__& theta_m,
                                                  RNG& base_rng__,
                                                  std::ostream* pstream__) 
const
{
  return exposure_limited_sphere_rng(a0, theta_m, base_rng__, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
get_kappa_functor__::operator()(const T0__& E, const T1__& B, const T2__& D,
                                const int& Z, std::ostream* pstream__)  const
{
  return get_kappa(E, B, D, Z, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
alpha_m_functor__::operator()(const T0__& theta, const std::vector<T1__>& p,
                              std::ostream* pstream__)  const
{
  return alpha_m(theta, p, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
dEdr_approx_functor__::operator()(const T0__& r, const T1__& E,
                                  std::ostream* pstream__)  const
{
  return dEdr_approx(r, E, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
get_Eth_src_sim_functor__::operator()(const T0__& Eth,
                                      const std::vector<std::vector<double>>& D,
                                      const std::vector<double>& x_r,
                                      const std::vector<int>& x_i,
                                      std::ostream* pstream__)  const
{
  return get_Eth_src_sim(Eth, D, x_r, x_i, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
get_phi_functor__::operator()(const T0__& xi, std::ostream* pstream__)  const
{
  return get_phi(xi, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
phi_integrand_functor__::operator()(const T0__& xi, const T1__& E,
                                    const T2__& z, std::ostream* pstream__) 
const
{
  return phi_integrand(xi, E, z, pstream__);
}

template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
abs_val_functor__::operator()(const T0__& input_vector,
                              std::ostream* pstream__)  const
{
  return abs_val(input_vector, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>
get_source_weights_functor__::operator()(const std::vector<T0__>& Q,
                                         const std::vector<T1__>& D,
                                         std::ostream* pstream__)  const
{
  return get_source_weights(Q, D, pstream__);
}

template <typename T0__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
stan::promote_args_t<stan::base_type_t<T0__>>
omega_to_theta_functor__::operator()(const T0__& omega,
                                     std::ostream* pstream__)  const
{
  return omega_to_theta(omega, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
get_source_threshold_energy_sim_functor__::operator()(const T0__& Eth,
                                                      const std::vector<double>& D,
                                                      const std::vector<double>& x_r,
                                                      const std::vector<int>& x_i,
                                                      std::ostream* pstream__) 
const
{
  return get_source_threshold_energy_sim(Eth, D, x_r, x_i, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
get_arrival_energy_sim_functor__::operator()(const T0__& E,
                                             const std::vector<double>& D,
                                             const std::vector<double>& x_r,
                                             const std::vector<int>& x_i,
                                             std::ostream* pstream__)  const
{
  return get_arrival_energy_sim(E, D, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__>, -1, 1>
vMF_rng_functor__::operator()(const T0__& mu, const T1__& kappa,
                              RNG& base_rng__, std::ostream* pstream__) 
const
{
  return vMF_rng(mu, kappa, base_rng__, pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
get_source_threshold_energy_functor__::operator()(const T0__& Eth,
                                                  const std::vector<double>& D,
                                                  const std::vector<double>& x_r,
                                                  const std::vector<int>& x_i,
                                                  std::ostream* pstream__) 
const
{
  return get_source_threshold_energy(Eth, D, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
dNdE_pl_functor__::operator()(const T0__& E, const T1__& alpha,
                              std::ostream* pstream__)  const
{
  return dNdE_pl(E, alpha, pstream__);
}

template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>>, -1, 1>
sample_orthonormal_to_rng_functor__::operator()(const T0__& mu,
                                                RNG& base_rng__,
                                                std::ostream* pstream__) 
const
{
  return sample_orthonormal_to_rng(mu, base_rng__, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>, -1, 1>
get_kappa_ex_functor__::operator()(const T0__& E, const T1__& B,
                                   const T2__& D, const int& Z,
                                   std::ostream* pstream__)  const
{
  return get_kappa_ex(E, B, D, Z, pstream__);
}

template <typename T0__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>>*>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
sphere_rng_functor__::operator()(const T0__& radius, RNG& base_rng__,
                                 std::ostream* pstream__)  const
{
  return sphere_rng(radius, base_rng__, pstream__);
}

template <typename T0__, typename T1__, typename RNG,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
stan::promote_args_t<T0__, T1__>
spectrum_rng_functor__::operator()(const T0__& alpha, const T1__& Emin,
                                   RNG& base_rng__, std::ostream* pstream__) 
const
{
  return spectrum_rng(alpha, Emin, base_rng__, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename RNG,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
exposure_limited_vMF_rng_functor__::operator()(const T0__& varpi,
                                               const T1__& kappa,
                                               const T2__& a0,
                                               const T3__& theta_m,
                                               RNG& base_rng__,
                                               std::ostream* pstream__) 
const
{
  return exposure_limited_vMF_rng(varpi, kappa, a0, theta_m, base_rng__,
           pstream__);
}

template <typename T0__, stan::require_all_t<stan::is_stan_scalar<T0__>>*>
stan::promote_args_t<T0__>
get_arrival_energy_functor__::operator()(const T0__& E,
                                         const std::vector<double>& D,
                                         const std::vector<double>& x_r,
                                         const std::vector<int>& x_i,
                                         std::ostream* pstream__)  const
{
  return get_arrival_energy(E, D, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__>>
E_ode_sim_functor__::operator()(const T0__& r,
                                const std::vector<T1__>& state,
                                const std::vector<T2__>& params,
                                const std::vector<double>& x_r,
                                const std::vector<int>& x_i,
                                std::ostream* pstream__)  const
{
  return E_ode_sim(r, state, params, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__, T3__>>
integrand_functor__::operator()(const T0__& xi,
                                const std::vector<T1__>& state,
                                const std::vector<T2__>& params,
                                const std::vector<T3__>& x_r,
                                const std::vector<int>& x_i,
                                std::ostream* pstream__)  const
{
  return integrand(xi, state, params, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
stan::promote_args_t<T0__, T1__, T2__>
dEdr_functor__::operator()(const T0__& r, const T1__& E,
                           const std::vector<T2__>& xiout,
                           const std::vector<double>& x_r,
                           const std::vector<int>& x_i,
                           std::ostream* pstream__)  const
{
  return dEdr(r, E, xiout, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>>*>
std::vector<stan::promote_args_t<T0__, T1__, T2__>>
E_ode_rev_sim_functor__::operator()(const T0__& r,
                                    const std::vector<T1__>& state,
                                    const std::vector<T2__>& params,
                                    const std::vector<double>& x_r,
                                    const std::vector<int>& x_i,
                                    std::ostream* pstream__)  const
{
  return E_ode_rev_sim(r, state, params, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, stan::base_type_t<T2__>>, -1, 1>
get_eps_from_kappa_functor__::operator()(const T0__& kappa_grid,
                                         const std::vector<Eigen::Matrix<T1__, -1, 1>>& eps,
                                         const T2__& kappa_ex,
                                         std::ostream* pstream__)  const
{
  return get_eps_from_kappa(kappa_grid, eps, kappa_ex, pstream__);
}


class single_source_sim_model final : public model_base_crtp<single_source_sim_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> varpi_data__;
  double D;
  double alpha;
  double Eth;
  double B;
  int Z;
  std::vector<double> x_r;
  std::vector<int> x_i;
  double Eth_src;
  std::vector<std::vector<double>> D_in;
  double D_kappa; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> varpi{nullptr, 0};
 
 public:
  ~single_source_sim_model() { }
  
  inline std::string model_name() const final { return "single_source_sim_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.31.0", "stancflags = --include-paths=/home/iwsatlas1/capel/projects/fancy/fancy/interfaces/stan"};
  }
  
  
  single_source_sim_model(stan::io::var_context& context__,
                          unsigned int random_seed__ = 0,
                          std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "single_source_sim_model_namespace::single_source_sim_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 9;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 10;
      context__.validate_dims("data initialization","varpi","double",
           std::vector<size_t>{static_cast<size_t>(3)});
      varpi_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      new (&varpi) Eigen::Map<Eigen::Matrix<double, -1, 1>>(varpi_data__.data(), 3);
        
      
      {
        std::vector<local_scalar_t__> varpi_flat__;
        current_statement__ = 10;
        varpi_flat__ = context__.vals_r("varpi");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
          current_statement__ = 10;
          stan::model::assign(varpi, varpi_flat__[(pos__ - 1)],
            "assigning variable varpi", stan::model::index_uni(sym1__));
          current_statement__ = 10;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 10;
      stan::math::check_unit_vector(function__, "varpi", varpi);
      current_statement__ = 11;
      context__.validate_dims("data initialization","D","double",
           std::vector<size_t>{});
      D = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 11;
      D = context__.vals_r("D")[(1 - 1)];
      current_statement__ = 12;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{});
      alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 12;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      current_statement__ = 13;
      context__.validate_dims("data initialization","Eth","double",
           std::vector<size_t>{});
      Eth = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 13;
      Eth = context__.vals_r("Eth")[(1 - 1)];
      current_statement__ = 13;
      stan::math::check_greater_or_equal(function__, "Eth", Eth, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization","B","double",
           std::vector<size_t>{});
      B = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 14;
      B = context__.vals_r("B")[(1 - 1)];
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "B", B, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization","Z","int",
           std::vector<size_t>{});
      Z = std::numeric_limits<int>::min();
      
      
      current_statement__ = 15;
      Z = context__.vals_i("Z")[(1 - 1)];
      current_statement__ = 16;
      x_r = std::vector<double>(1, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 17;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
      current_statement__ = 18;
      Eth_src = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 19;
      D_in = 
        std::vector<std::vector<double>>(1, 
          std::vector<double>(1, std::numeric_limits<double>::quiet_NaN()));
      
      
      current_statement__ = 20;
      D_kappa = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 21;
      stan::model::assign(D_in, (((D / 3.086) * 100) - 0.02),
        "assigning variable D_in", stan::model::index_uni(1),
                                     stan::model::index_uni(1));
      current_statement__ = 22;
      D_kappa = (((D / 3.086) * 10) - 0.2);
      current_statement__ = 23;
      stan::model::assign(x_r, 1.0e4,
        "assigning variable x_r", stan::model::index_uni(1));
      current_statement__ = 24;
      Eth_src = stan::model::rvalue(
                  get_Eth_src_sim(Eth, D_in, x_r, x_i, pstream__),
                  "get_Eth_src_sim(Eth, D_in, x_r,\nx_i)",
                  stan::model::index_uni(1));
      current_statement__ = 25;
      stan::math::validate_non_negative_index("E", "N", N);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("kappa", "N", N);
      current_statement__ = 27;
      stan::math::validate_non_negative_index("Earr", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "single_source_sim_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "single_source_sim_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<double> E =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> kappa =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> Earr =
         std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 4;
        stan::model::assign(E,
          spectrum_rng(alpha, Eth_src, base_rng__, pstream__),
          "assigning variable E", stan::model::index_uni(i));
        current_statement__ = 5;
        stan::model::assign(kappa,
          get_kappa(stan::model::rvalue(E, "E", stan::model::index_uni(i)),
            B, D_kappa, Z, pstream__),
          "assigning variable kappa", stan::model::index_uni(i));
        current_statement__ = 6;
        stan::model::assign(Earr,
          get_arrival_energy_sim(
            stan::model::rvalue(E, "E", stan::model::index_uni(i)),
            stan::model::rvalue(D_in, "D_in", stan::model::index_uni(1)),
            x_r, x_i, pstream__),
          "assigning variable Earr", stan::model::index_uni(i));
      }
      out__.write(E);
      out__.write(kappa);
      out__.write(Earr);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"E", "kappa", "Earr"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N)},
      std::vector<size_t>{static_cast<size_t>(N)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kappa" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Earr" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "E" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "kappa" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Earr" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"E\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"kappa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Earr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"E\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"kappa\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"Earr\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((N + N) + N);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 
  ((N + N) + N);
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = single_source_sim_model_namespace::single_source_sim_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return single_source_sim_model_namespace::profiles__;
}

#endif


